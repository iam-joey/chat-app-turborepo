generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(cuid())
  username  String     @unique
  email     String     @unique
  password  String
  rooms     RoomUser[]
  messages  Message[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Room      Room[]
}

model Room {
  id        String     @id @default(cuid())
  name      String
  users     RoomUser[]
  messages  Message[]
  creator   User       @relation(fields: [creatorId], references: [id])
  creatorId String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model RoomUser {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  room      Room     @relation(fields: [roomId], references: [id])
  userId    String
  roomId    String
  createdAt DateTime @default(now())

  @@unique([userId, roomId])
}

model Message {
  id        String     @id @default(cuid())
  content   String
  sender    User       @relation(fields: [senderId], references: [id])
  room      Room       @relation(fields: [roomId], references: [id])
  senderId  String
  roomId    String
  upvotes   Upvote[]   @relation("MessageUpvotes")
  downvotes Downvote[] @relation("MessageDownvotes")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Upvote {
  id        String   @id @default(cuid())
  message   Message  @relation("MessageUpvotes", fields: [messageId], references: [id])
  messageId String
  createdAt DateTime @default(now())
}

model Downvote {
  id        String   @id @default(cuid())
  message   Message  @relation("MessageDownvotes", fields: [messageId], references: [id])
  messageId String
  createdAt DateTime @default(now())
}
